# The MIT License (MIT).
# 
# Copyright (c) 2018-2024 Almaz Ilaletdinov <a.ilaletdinov@yandex.ru>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.

[tool.poetry]
name = "quranbot-aiogram"
version = "3.5.1"
description = ""
authors = ["Almaz Ilaletdinov <a.ilaletdinov@yandex.ru>"]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
loguru = "0.7.2"
quranbot-schema-registry = "0.0.28"
sentry-sdk = "1.42.0"
httpx = "0.27.0"
pytz = "2024.1"
databases = {extras = ["asyncpg"], version = "0.9.0"}
attrs = "23.2.0"
jsonpath-ng = "1.6.1"
eo-styleguide = "0.0.1-a12"
redis = "5.0.3"
furl = "2.1.3"
eljson = "0.0.1a1"
python-dateutil = "2.9.0.post0"
aio-pika = "9.4.1"
apscheduler = "3.10.4"
jinja2 = "3.1.3"
ujson = "5.9.0"

[tool.poetry.group.dev.dependencies]
wemake-python-styleguide = { git = "https://github.com/wemake-services/wemake-python-styleguide", branch="master" }
deltaver = "0.2.1"
ipython = "8.22.2"
mypy = "1.9.0"
asyncpg-stubs = "0.29.1"
pytest-cov = "4.1.0"
pytest = "8.1.1"
pytest-asyncio = "0.23.6"
pytest-mock = "3.12.0"
pytest-lazy-fixtures = "1.0.7"
types-pytz = "2024.1.0.20240203"
types-redis = "4.6.0.20240311"
types-pytest-lazy-fixture = "0.6.3.20240310"
flake8-copyright = "0.2.4"
pytest-randomly = "3.15.0"
telethon = "1.34.0"
yoyo-migrations = "8.2.0"
sqlfluff = "3.0.2"
respx = "0.20.2"
psycopg2-binary = "2.9.9"
time-machine = "2.14.0"
pika = "1.3.2"
ruff = "0.3.3"
fakeredis = "2.21.3"
refurb = "2.0.0"
types-python-dateutil = "2.9.0.20240316"
types-ujson = "5.9.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
skip-string-normalization = true

[tool.pytest.ini_options]
filterwarnings = [
  # TODO #360:30min включить проверку warnings
  #  Рассскомаентировать следующую строку
  # "error::DeprecationWarning",
  "error::pytest.PytestUnknownMarkWarning",
  "error::pytest.PytestUnraisableExceptionWarning",
]
asyncio_mode = "auto"
addopts = [
  "--doctest-modules",
]
markers = [
  "tg_button: tests that check the behavior of buttons",
]

[tool.isort]
line_length = 120
multi_line_output = 3
include_trailing_comma = true

[tool.sqlfluff.core]
max_line_length = 120

[tool.ruff]
# TODO #360:30min Поднять python target-version до "py312"
target-version = "py311"
line-length = 120
preview = true
output-format = "concise"

[tool.ruff.lint]
select = ["ALL"]
preview = true
fixable = [
  "F401",   # Unused import
]
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ARG001",  # Unused function argument
  "ARG002",  # Unused method argument
  "D203",    # no-blank-line-before-class
  "D213",    # multi-line-summary-first-line
  "D418",    # Function decorated with `@overload` shouldn't contain a docstring
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean-typed positional argument in function definition
  "FIX002",  # Line contains T0DO, consider resolving the issue
  "FLY002",  # We not use f-strings
  "I001",    # Conflict with isort
  "INP001",  # File ... is part of an implicit namespace package. Add an `__init__.py`.
  "RUF100",  # WPS primary linter
  "RUF001",  # Project contain cyrillic symbols
  "RUF002",  # Project contain cyrillic symbols
  "RET505",  # Unnecessary `elif` after `return` statement
  "RET506",  # Unnecessary `elif` after `raise` statement
  "UP030",   # We use explicit references
  "UP032",   # We not use f-strings
  "UP004",   # Class `PrayerReaction` inherits from `object`
  "TD",      # "t0do" formats
  "PLR630",  # We not respect staticmethods
  "G001",    # Only .format for strings
  "TRY400",  # logger.error enable
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.per-file-ignores]
"src/integrations/tg/tg_answers/__init__.py" = ["F401"]
"src/tests/*" = [
  "S101",    # use of `assert` detected
  "D",       # Docstrings
  "ANN",     # Annotations
  "PLR2004", # Magic value
  "PLR0913", # Too many arguments to function call
]

[tool.refurb]
ignore = [184]

[tool.deltaver]
fail_on_avg = 50
fail_on_max = 180

[tool.mutmut]
paths_to_mutate="src/app_types/,src/db/,src/exceptions/,src/handlers/,src/integrations/,main.py,quranbot_answer.py,schedule_app.py,src/services/,src/settings/,src/srv/"
runner="pytest src/tests/unit -x -q --tb=no -o addopts=''"
tests_dir="src/tests/unit"
